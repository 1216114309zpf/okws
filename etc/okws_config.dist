##
## $Id$
##
## This is the primary okd configuration file, which is typcially placed
## in /usr/local/etc/okws.  This file needs to be editted before your
## OKWS will work.  By default, currently, OKWS does not come with any
## compiled modules, though in future versions, it might....
##

##
## BindAddr <ip-addr> <port>
##
##   tells okd which IP address to bind to, and which port to listen on.
##   Default port is 80.
##  	
BindAddr 	0.0.0.0 8081

##
## ListenPorts <ports>
##
##   One might want okd to listen for incoming HTTP connections on
##   more than one port.  Specify those ports here.  Note that
##   the port given in "BindAddr" above will still be the implicit
##   (and primary) port that okd listens on.
##
ListenPorts 80 8080 8011


##
## JailDir <dir>
##
##   All services run by okd will be in a chroot jail, assuming that okd
##   is started as root.  Specify where this chroot jail is with the
##   jaildir parameter.  Note that after you install your services,
##   they will be in a directory given by:
##
##      /usr/local/okws/modules/<name>/<version>/<tag>/run
##   
##   by default.  We recommend at first that you compile with 
##   debug mode, so in the above, name=example, version=0.1,
##   and tag=debug.
##
JailDir 	/usr/local/okws/modules/example/0.1/debug/run

##
## ServiceBin <dir>
##
##   Directory within JailDir, in which to find the OKWS service
##   executables.  In cluster setting, might actually be
##   an NFS mount point. 
##
ServiceBin	svc

## SocketDir 	<dir>
##
##	Within the JailDir, where OKWS services should go to
##	read local named UNIX sockets. For instance, if the
##	the following configuration is specified:
##
##		JailDir		/var/okws/modules/example/0.1/debug/run
##		SocketDir	/sockets
##
##	then the final socket directory will live:
##
##		/var/okws/modules/example/0.1/debug/run/sockets
##
##	on the physical, unjailed file system.
##
SocketDir	/sockets

##
## CoreDumpDir <dir>
##
##   Relative to JailDir, where the services will dump core should
##   they crash.  okld will make the appropriate parent directories
##   on boot for these coredump files.  If okld is run as non-root,
##   then services will dump to whichever directory they were booted
##   into. Note that you will need to enable setgid coredumps on your
##   system, which is sometime turned off for security reasons.  
##   On FreeBSD, for instance:
##
##	 sysctl kern.sugid_coredump=1
##       sysctl kern.coredump=1
##
##   
CoreDumpDir 	/var/coredumps

##
## ServiceLowUid <uid>
## ServiceHighUid <gid>
##
##   When run as root, okld will assign each service a unique UID,
##   so that the different services will not be able to inspect each
##   others executables, or ptrace each other. The UIDs will be picked
##   the following ranges, unless explicitly given in a "Service"
##   configuration line. Specifying a range small than the number
##   of Services will result in a configuration error.
##
ServiceLowUid	51000
ServiceHighUid	52000

##
## OkdUser <user>
## OkdGroup <group>
##
##   Specify the user/group that okd should run as.  If launched by root,
##   okd will drop down to the user/group specified after binding to the
##   appropriate listen port. The user/group must be able to read and
##   execute services, in case they need to be restarted.
##
OkdUser		www
OkdGroup	www

##
## TopDir <dir>
##
##   The parent directory for OKWS standard executables, such as 
##   okd, pubd, and oklogd.
##
TopDir /usr/local/lib/okws

##
## PubdExecPath <path>
##
##   Tell okd where the Publishing Daemon (pubd) can be launched from.  Okd
##   will launch pubd prior to calling chroot, so the path should be relative
##   to "TopDir". Note this must come in the config file before all
##   of the configuration directives that call upon it.
##
##   Note that it's possible to give command line options to pub here.
##   Specify the "-w" option, for instance, turns on White-space-stripping
##   which results in pretty good space savings.
##
## PubdInet <ip-addr> <port>
##
##   Alternatively, okd can connect to pubd over a TCP socket at the given
##   IP address and port.
##
## PubdUnix <path>
##
##   Alternatively, okd can connect to pubd over a Unix domain socket. This
##   path is relative to the real top of the file system, and not the 
##   chroot jail.
##
PubdExecPath	pubd -w

##
## OkdlogdExecPath <path>
##
##   Tell okd where to find "oklogd", the RPC-based logging daemon.  The
##   path should be relative to real root of the file system.
##
OklogdExecPath	oklogd

##
## OkdExecPath <path>
##
##   Tell okld where to find okd. The path should be relative to "TopDir"
##
OkdExecPath 	okd

##
## AcessLog <path>
## ErrorLog <path>
## AccessLogFmt <fmt-string>
##
##   These parameters are passed to okdlogd, telling it where and how to
##   log access and error requests. The AcessLog and ErrorLog are given
##   as relative paths to the top logging directory.  If launched as root,
##   oklogd will chroot to the JailLogDir given, and take these log
##   file locations as relative to there.
##
##   The possible values for format string are as follows:
##
##     i - remote IP address of client.
##     v - service Name
##     t - time of request
##     1 - first line of the HTTP headers in the request
##     s - status of the reply (e.g., 200 or 404)
##     b - number of bytes sent over the wire.
##     U - userID (64-bit integer; 0 if none)
##     r - Referer
##     z - length of inflated content (if gzipped, 0 if not)
## 
##   These values are subject to change with future releases.
##
LogDir		/var/log/okws
AccessLog	/access_log
ErrorLog	/error_log
AccessLogFmt	ivt1sbU

##
## OklogdUser <user>
## OklogdGroup <group>
##
##   The username and group the RPC-based logger should run as.  Should
##   probably be a UID not in use in other parts of the OKWS system.
##
OklogdUser	oklog
OklogdGroup	oklog

##
## UnsafeMode <0|1>
##
##   In unsafe mode, okld does not enforce that every service is run
##   by a unique UID; nor does it change the ownership of service
##   executables.  Rather, it will accept the current, possibly
##   unsafe service configuration.  This flag is clearly off by
##   default.
##
#UnsafeMode 0

##
## Service <jailed-path> <URI-path>
##
##   Tells okd to launch and route to particular services.  The first argument
##   should be the path of the service, relative to the root given by 
##   JailDir.  The second parameter is the HTTP URI that should map to this
##   service.
##
##   If the jailed path <path> is given with leading '/', then it will
##   be completed as:
##
##      <JailDir>/<path>
##
##   Withouth leading front slash, the path to the executable will
##   be completed as:
##
##      <JailDir>/<ServiceBin>/<path>
##
##   If one has specified mutliple ListenPorts above, then prepend
##   a ":" and a port # to the URI-path. An example is given below
## 
##
Service 	google 	/google        # listen port=8081
Service		pt1	/pt1           # listen port=8081
Service 	pt2 	:8080/pt2      # listen port=8080

##
##   With the Service directive, it is also possible to pass 
##   environment variables specific to the particular service.
##   In the following example, we're telling the dmalloc library
##   to turn on runtime debug checks for only the login service:
##
Service	DMALLOC_OPTIONS=debug=0x4f4ed03,inter=100 login /login

##
##   It is also possible to set a per-service limit on requests
##   served or lifetime, with the -r and -t flags, respectively.
##   See ServiceLifeRequests and ServiceLifeTime for more details.
##
##   In this example, run logout for either 1000 requests, or for
##   30000 seconds, whichever comes first.
##
Service logout -r 1000 -t 30000 /logout

##
## Gzip Compression Configuration
##
##   Gzip'ping is on by default, with a compression level of 2 on the 
##   server side (note that pubd automatically publishes with compression
##   level 9).  Turn it off by specifying "Gzip 0".  Compress level can
##   be set between 0 and 9.
##
Gzip 		1           # 0
GzipLevel 	2           # fast gzipping
GzipSmallStrLen	0x200       # smaller strings are smushed together
GzipCacheMin	0x200       # minimum size for a cached string
GzipCacheMax	0x10000     # maximum size of string to cache
GzipMemLevel	9	    # maximum memory utilization

##
## Aliases <To-URI> <From-URI>
##
##   You can alias one URI to another rather easily using this
##   directive.
##
##   Note that as above with services, ports can be specified
##   with aliases.  In this way, it is possible to have the same
##   service available simultaneously on two different ports.
##
##   For the examples below, recall that we've set the **default port**
##   to 8081 via the "BindAddr" directive above.
##
##
Alias	/t1	/test1		# http://x.cc:8081/test1 -> http://x.cc:8081/t1
Alias	:80/t1	:8080/test2	# http://x.cc:8080/test2 -> http://x.cc/t1
Alias	/t1	:80/test3	# http://x.cc/test3 -> http://x.cc:8081/t1

##
## Log Timing
##
##   In each OK service, a log timer will go off every X milliseconds
##   to update a timestamp.  Every Y of those timer events, a the log
##   will be flushed to the external logging daemon. (LogTick = X, and
##   LogPeriod = Y).  The default numbers are given below.
##
LogTick		500
LogPeriod	8
SvcLog		1

##
## Client Timeout
##
##   Time the remote client's request out after a fixed amount of time --
##   this value is given in seconds.
##
ClientTimeout	60

##
## ChannelLimit
##
##   Limits amounts of data that a client is allowed to send; to stop
##   DOS attacks on memory. Specified in bytes.
##
ChannelLimit 	262144     # 256k

##
## FilterCGI
##
##   Filter out those characters that might lead to XSS attacks.
##   In particular, use the following tranlsations:
##	
##	'<'	-->	"&lt;"
##	'>'	-->	"&gt;"
##	'('	-->	"&#40;"
##	'#'	-->	"&#35;"
##	'&'	-->	"&#38;"
##
##   Depending on the value given to the FilterCGI option, OKWS will
##   behave in the following manners:
##
##	0 - No XSS filtering
##	1 - Filter only the output of safe_lookup (and therefore cgi[]).
##	2 - Filter everything inserted into the CGI table.
##  
##   Obviously, 0 is the most lenient level, while 2 is the strictest.
##   Other levels might be introduced in future updates. The default
##   value is 2.
##
FilterCGI 2

##
## ErrorDoc
##
##   Specify custom error documents (in regular PUB file format).
##   Custom error documents might have variable expansions for the 
##   variables: ${STATUS}, ${SERVINFO}, ${AUXSTR}
##
#ErrorDoc	404	/404.html
#ErrorDoc	500	/500.html


##=======================================================================
## Support For Python Scripts
##
##   If you have installed py-OKWS, then the following types of directives
##   are needed to tell OKWS where to find your interpreter, and where
##   to find your Python scripts.
## 

##
## Interpreter <local-name> <path>
##
##   Chose an interpreter, and assign it a name local to this OKWS
##   configuration that can be used in other places in this file.
##
#Interpreter PY /usr/local/bin/python

##
## Script <jailed-path> <URI>
##
##   Follows the exact template as the 'Service' directive above,
##   with the added ability to specify that the given script must be
##   run with the given interpreter.
##
Script PY /py-svc/users.py /users

##=======================================================================
## Other Miscellaneous Options
##

##
## ServiceFDQuota
##
##   The maximum number of FDs that can be backed up when sending 
##   to a service.  If a service is not receiving FDs, it's probably
##   stuck in a bad loop, and therefore, okd should not waste additional
##   FDs on it.  Eventually, OKWS can run out.
##
##   Note that ServiceFDQuote must be set **less** than 
##   OkdFDLowWat.
##
ServiceFDQuota		500

##
## OkdFDHighWat
## ServiceFDHighWat
##
##   Number of file descriptors that OKD can have open before turning
##   off accept.
##
##   Similarly, number of open file descriptors a service can have before
##   rejecting requests.
##
OkdFDHighWat		900
ServiceFDHighWat	1000

##
## OkdFDLowWat
## ServiceFDHighWat
##
##   After OKD has turned off accept, it lets FDs drain before to the low
##   water mark befor turning accept back on.  This stops flip-flop
##   beavhior.
##
##   Similarly, number of open file descripts to drop below before
##   reallowing requests
##
##
OkdFDLowWat	800
ServiceFDLowWat	950

##
## ServiceLifeRequests
## ServiceLifeTime
##
##   Set the maximum number of requests for each service to serve,
##   or the maximum amount of time to be alive.  Whichever lifetime
##   expires first, the service will shut down, and okld will start
##   a new version.  Useful if your services have memory leaks.
##
##   Default value is 0, meaning infinite lifetime.
##
##   Can override on a service-by-service basis with the -r and -t
##   options to Service, for LifeRequests and LifeTime, respectively.
##
ServiceLifeRequests 	0
ServiceLifeTime		0

##
##=======================================================================
