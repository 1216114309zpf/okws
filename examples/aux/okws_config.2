##
## $Id$
##
## This is the primary okd configuration file, which is typcially placed
## in /etc/sfs. Unfortunately, order matters a bit here.  Namely,
## the JailDirectories should be specified before properties that
## depend on them....
##

##
## BindAddr <ip-addr> <port>
##
##   tells okd which IP address to bind to, and which port to listen on.
##   Default port is 80.
##  	
BindAddr 	18.26.4.239 8081

##
## JailDir <dir>
##
##   Top level jail directory that okld, okd, and all services will
##   run in.
##    
JailDir 	/var/okws/modules/example/0.1/pydbg/run


##
## ServiceBin <dir>
##
##   Directory within JailDir, in which to find the OKWS service
##   executables.  In cluster setting, might actually be
##   an NFS mount point. The default value here is the empty string ---
##   that is, by default, service executables are assumed to be in 
##   the top level runtime jail directory.  This is not much of a 
##   security concern, as services will be forced into mode 0700,
##   and owned by whoever is running them.  Thus, if okd or any
##   of the services is compromised, they should not be able to
##   examine the executables of other services.
##
ServiceBin	svc

##
## SocketDir 	<dir>
##
##	Within the JailDir, where OKWS services should go to
##	read local named UNIX sockets. For instance, if the
##	the following configuration is specified:
##
##		JailDir		/var/okws
##		SocketDir	/var/run
##
##	then the final socket directory will live:
##
##		/var/okws/var/run
##
##	on the physical, unjailed file system
##
SocketDir	/var/run

##
## CoreDumpDir <dir>
##
##   Relative to JailDir, where the services will dump core should
##   they crash.  On FreeBSD for instance, the sysctl lines:
##
##       systcl kern.corefile="/var/coredumps/%U/%N.core"
##	 sysctl kern.sugid_coredump=1
##       sysctl kern.coredump=1
##
##   are recommended.  okdld will make the appropriate parent directories
##   on boot for these coredump files. Note that under these setting,
##   the services will dump to either the real /var/coredumps or the
##   jailed /var/coredumps on the basis of whether or not the 
##   services were run in the jail.  Most other functions in OKWS 
##   simulate jailing, even if they are not run as root and therefore
##   cannot jail.
##
CoreDumpDir 	/var/coredumps

##
## ServiceLowUid <uid>
## ServiceHighUid <gid>
##
##   When run as root, okld will assign each service a unique UID,
##   so that the different services will not be able to inspect each
##   others executables, or ptrace each other. The UIDs will be picked
##   the following ranges, unless explicitly given in a "Service"
##   configuration line. Specifying a range small than the number
##   of Services will result in a configuration error.
##
ServiceLowUid	51000
ServiceHighUid	52000

##
## OkdUser <user>
## OkdGroup <group>
##
##   Specify the user/group that okd should run as.  If launched by root,
##   okd will drop down to the user/group specified after binding to the
##   appropriate listen port. The user/group must be able to read and
##   execute services, in case they need to be restarted.
##
OkdUser		www
OkdGroup	www

##
## TopDir <dir>
##
##   The parent directory for OKWS standard executables, such as 
##   okd, pubd, and oklogd.
##
TopDir /usr/local/lib/okws/pydbg

##
## PubdExecPath <path>
##
##   Tell okd where the Publishing Daemon (pubd) can be launched from.  Okd
##   will launch pubd prior to calling chroot, so the path should be relative
##   to "TopDir". Note this must come in the config file before all
##   of the configuration directives that call upon it.
##
## PubdInet <ip-addr> <port>
##
##   Alternatively, okd can connect to pubd over a TCP socket at the given
##   IP address and port.
##
## PubdUnix <path>
##
##   Alternatively, okd can connect to pubd over a Unix domain socket. This
##   path is relative to the "TopDir"
##
PubdExecPath	pubd -w

##
## OkdlogdExecPath <path>
##
##   Tell okld where to find "oklogd", the RPC-based logging daemon.  The
##   path should be relative to "TopDir"
##
OklogdExecPath	oklogd

##
## OkdExecPath <path>
##
##   Tell okld where to find okd. The path should be relative to "TopDir"
##
OkdExecPath 	okd

##
## LogDir <path>
## AcessLog <path>
## ErrorLog <path>
## AccessLogFmt <fmt-string>
##
##   These parameters are passed to okdlogd, telling it where and how to
##   log access and error requests. The AcessLog and ErrorLog are given
##   as relative paths to the top logging directory.  If launched as root,
##   oklogd will chroot to the LogDir given, and take these log
##   file locations as relative to there.
##
LogDir 		/var/okws/log
AccessLog	/access_log
ErrorLog	/error_log
AccessLogFmt	ivt1sbU

##
## OklogdUser <user>
## OklogdGroup <group>
##
##   The username and group the RPC-based logger should run as.  Can usually
##   be the same as okd itself.
##
OklogdUser	www
OklogdGroup	www

##
## UnsafeMode <0|1>
##
##   In unsafe mode, okld does not enforce that every service is run
##   by a unique UID; nor does it change the ownership of service
##   executables.  Rather, it will accept the current, possibly
##   unsafe service configuration.  This flag is clearly off by
##   default.
##
#UnsafeMode 0

##
## Service <jailed-path> <URI-path> [<uname>|<uid>]
##
##   Tells okd to launch and route to particular services.  The first argument
##   should be the path of the service, relative to the root given by 
##   JailDir.  The second parameter is the HTTP URI that should map to this
##   service. The optional third parameter specifies which user this
##   particular service should run as.  There should be little if any
##   need for this; usually, the UID will be assigned by okld
##
#Service 	drip /drip

##
## Service2
##
##   Opposite ordering of <URI-path> and <jailed-path> from Service.
##
##Service2	/users /python /home/am0/max/pyokws1/test/svc/users.py

##
## Intepreter
##
##   Specify an interpreter to use for Scripts.
##
Interpreter PY /usr/local/bin/python

##
## Script <interpreter> <jailed-path> <URI-Path>
##  
Script PY /py-svc/users.py /users


##
## Gzip Compression Configuration
##
##   Gzip'ping is on by default, with a compression level of 2 on the 
##   server side (note that pubd automatically publishes with compression
##   level 9).  Turn it off by specifying "Gzip 0".  Compress level can
##   be set between 0 and 9.
##
Gzip 		1           # 0
GzipLevel 	2           # fast gzipping
GzipSmallStrLen	0x200       # smaller strings are smushed together
GzipCacheMin	0x200       # minimum size for a cached string
GzipCacheMax	0x10000     # maximum size of string to cache
GzipMemLevel	9	    # maximum memory utilization

##
## Aliases
##
##   You can alias one URI to another rather easily.  In the following
##   example, a user requesting http://foo.com/test1 will be internally
##   redirected to http://foo.com/t1, and will be serviced by the 
##   okservice at /websrv/t1.  The special name "/" can be used as
##   well.
##
#Alias    /test1   /t1
#Alias    /        /main

##
## Log Timing
##
##   In each OK service, a log timer will go off every X milliseconds
##   to update a timestamp.  Every Y of those timer events, a the log
##   will be flushed to the external logging daemon. (LogTick = X, and
##   LogPeriod = Y).  The default numbers are given below.
##
LogTick		500
LogPeriod	8

##
## Client Timeout
##
##   Time the remote client's request out after a fixed amount of time --
##   this value is given in seconds.
##
ClientTimeout	60

##
## ChannelLimit
##
##   Limits amounts of data that a client is allowed to send; to stop
##   DOS attacks on memory. Specified in bytes.
##
ChannelLimit 	262144     # 256k
