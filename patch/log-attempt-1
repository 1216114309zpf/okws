Index: libaok/oklog.h
===================================================================
--- libaok/oklog.h	(revision 5280)
+++ libaok/oklog.h	(working copy)
@@ -36,11 +36,8 @@
 
 #define LOG_TIMEBUF_SIZE   64
 #define LOG_BUF_MINSIZE    0x800     // must be at least 2wice maxwrite
-#define LOG_BUF_DEFSIZE    0x10000
 #define LOG_BUF_MAXWRITE   0x1000
-#define LOG_BUF_MAXLEN     0x800000
 #define LOG_BUF_TINYLEN    32
-#define LOG_BUF_HIGHWAT    0x7e00   // 2^15 - 512
 
 // Unlike regular mstr class, mstr2 can be assigned to a str and still
 // retain its data.  this allows us to reuse the malloc'ed memory, as
@@ -83,8 +80,8 @@
 
 class logbuf_t {
 public:
-  logbuf_t (u_int s = LOG_BUF_DEFSIZE, u_int h = LOG_BUF_HIGHWAT)
-    : sz (max (s, static_cast<u_int> (LOG_BUF_MINSIZE))),
+  logbuf_t (size_t s = ok_log_buf_size, size_t h = ok_log_hiwat)
+    : sz (max (s, size_t (LOG_BUF_MINSIZE))),
       bufs (sz, ok_log_nbufs), 
       okfl (true), hwat (h) { assert (getbuf ()); }
   ~logbuf_t () {}
@@ -133,13 +130,13 @@
   int lock ();
   void unlock (int i) { if (i >= 0) bufs.unlock (i); }
   bool to_str (str *s, int *i);
-  inline bool past_high_water () const { return ((cp - buf) > int (hwat)); }
+  inline bool past_high_water () const { return ((cp - buf) > ssize_t (hwat)); }
 private:
   bool getbuf ();
   void clearbuf ();
   bool resize ();
 
-  u_int sz;
+  size_t sz;
   mstrs bufs;
   mstr2 *cmbuf;
   int cmbuf_i;
@@ -148,7 +145,7 @@
   suio uio;
   bool okfl;
   char tiny[LOG_BUF_TINYLEN];
-  u_int hwat;
+  size_t hwat;
 };
 
 class logd_parms_t {
Index: libaok/ok.T
===================================================================
--- libaok/ok.T	(revision 5280)
+++ libaok/ok.T	(working copy)
@@ -286,6 +286,8 @@
     t->lookup ("loggers", &loggers);
     t->lookup ("lqm", &ok_listen_queue_max);
     t->lookup ("nlb", &ok_log_nbufs);
+    t->lookup ("lbs", &ok_log_buf_size);
+    t->lookup ("lhw", &ok_log_hiwat);
     t->lookup ("p3jse", &ok_pub3_json_strict_escaping);
     t->lookup ("jsibm", &ok_pub3_json_int_bitmax);
     ok_svc_accept_msgs = t->blookup ("acmsg");
Index: libpub/okconst.h
===================================================================
--- libpub/okconst.h	(revision 5280)
+++ libpub/okconst.h	(working copy)
@@ -218,6 +218,8 @@
 extern u_int ok_log_tick;                       // how often log timer ticks
 extern u_int ok_log_period;                     // how many ticks to a flush
 extern u_int ok_log_nbufs;                      // how many buffers for the log
+extern size_t ok_log_buf_size;                  // how big each buffer should be
+extern szie_t ok_log_hiwat;                     // high water mark, when to flush
 extern str ok_syslog_priority;                  // syslog section
 extern str ok_syslog_tag;                       // syslog tag (-t format)
 extern str ok_syslog_domain;                    // domain for syslog
Index: okd/okd.T
===================================================================
--- okd/okd.T	(revision 5280)
+++ okd/okd.T	(working copy)
@@ -276,6 +276,8 @@
     .ignore ("Service2")
     .ignore ("Script")
     .ignore ("LogBuffers")
+    .ignore ("LogBufferSize")
+    .ignore ("LogHighWater")
 
     .ignore ("MmapClockDaemon")
     .ignore ("Interpreter")
Index: okd/okld.T
===================================================================
--- okd/okld.T	(revision 5280)
+++ okd/okld.T	(working copy)
@@ -727,6 +727,8 @@
     .add ("OkdUser", &_config_okd_un)
     .add ("OkdGroup", &_config_okd_gr)
     .add ("LogBuffers", &ok_log_nbufs, 2, 100)
+    .add ("LogBufferSize", &ok_log_buf_size, size_t (0x1000), size_t (0x100000000))
+    .add ("LogHighWater", &ok_log_hiwat, size_t (0x1000), size_t (0x100000000))
     
     .add ("ServerName", &reported_name)
     .add ("ServerVersion", &version)
@@ -965,6 +967,8 @@
     .insert ("pub3chnk", ok_pub3_max_datasz)
     .insert ("sel", int (ok_sys_sel_policy))
     .insert ("nlb", ok_log_nbufs)
+    .insert ("lbs", ok_log_buf_size)
+    .insert ("lhw", ok_log_hiwat)
     .insert ("p3jse", ok_pub3_json_strict_escaping)
     .insert ("lqm", ok_listen_queue_max)
     .insert ("jsibm", ok_pub3_json_int_bitmax);
