Index: libpub/scalar.C
===================================================================
--- libpub/scalar.C	(revision 4616)
+++ libpub/scalar.C	(working copy)
@@ -28,12 +28,24 @@
 //-----------------------------------------------------------------------
 
 scalar_obj_t::_p_t::_p_t () 
-  : _double_cnv (CNV_NONE), _int_cnv (CNV_NONE), _uint_cnv (CNV_NONE) {}
+  : _double_cnv (CNV_NONE), _int_cnv (CNV_NONE), _uint_cnv (CNV_NONE),
+    _natural_type (TYP_NONE) {}
 
 scalar_obj_t::_p_t::_p_t (const str &s)
-  : _s (s), _double_cnv (CNV_NONE), _int_cnv (CNV_NONE), _uint_cnv (CNV_NONE) {}
+  : _s (s), _double_cnv (CNV_NONE), _int_cnv (CNV_NONE), _uint_cnv (CNV_NONE),
+    _natural_type (TYP_NONE) {}
 
 
+//-----------------------------------------------------------------------
+
+bool
+scalar_obj_t::_p_t::is_explicit_double () const
+{
+  return false;
+}
+
+//-----------------------------------------------------------------------
+
 int64_t 
 scalar_obj_t::_p_t::to_int64 () const
 {
Index: libpub/pscalar.h
===================================================================
--- libpub/pscalar.h	(revision 4616)
+++ libpub/pscalar.h	(working copy)
@@ -60,6 +60,7 @@
     double to_double () const;
     bool to_bool () const;
     bool is_null () const { return !_s; }
+    bool is_explicit_double () const;
 
     bool to_int64 (int64_t *out) const;
     bool to_double (double *out) const;
@@ -73,7 +74,8 @@
     void clear ();
     
     typedef enum { CNV_NONE = 0, CNV_OK = 1, CNV_BAD = 2 } cnv_status_t;
-    
+    typedef enum { TYP_NONE = 0, TYP_STR = 1, TYP_INT = 2, 
+		   TYP_UINT = 3, TYP_DOUBLE = 4} type_t;
   private:
     str _s;
     
@@ -81,6 +83,8 @@
     mutable double _d;
     mutable int64_t _i;
     mutable u_int64_t _u;
+    mutable bool _d_explicit;
+    mutable type_t _natural_type;
   };
 
   //-----------------------------------------------------------------------
@@ -107,6 +111,7 @@
   bool is_null () const { return _p->is_null (); }
   str trim () const;
   str to_str_n () const { return _p->to_str_n (); }
+  bool is_explicit_double () const { return _p->is_explicit_double (); }
 
   void set (const str &s) { _p->set (s); }
   void set (double d) { _p->set (d); }
Index: libpub/pub3expr.h
===================================================================
--- libpub/pub3expr.h	(revision 4616)
+++ libpub/pub3expr.h	(working copy)
@@ -240,6 +240,7 @@
     const char *get_obj_name () const { return "pub3::expr_null_t"; }
     bool eval_as_null (eval_t e) const { return true; }
     static ptr<expr_null_t> alloc (int l = -1);
+    str to_str () const { return json::null (); }
   };
 
   //-----------------------------------------------------------------------
