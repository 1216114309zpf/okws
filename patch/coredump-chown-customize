Index: libpub/okconst.C
===================================================================
--- libpub/okconst.C	(revision 4543)
+++ libpub/okconst.C	(working copy)
@@ -188,6 +188,8 @@
 const char *ok_jaildir_run = "var/run";
 const char *ok_service_bin = "";
 const char *ok_logd_pidfile = "oklogd.pid";
+const char *ok_coredump_user = ok_root;
+const char *ok_coredump_group = ok_wheel;
 
 //
 // log constants for timing
Index: libpub/okconst.h
===================================================================
--- libpub/okconst.h	(revision 4543)
+++ libpub/okconst.h	(working copy)
@@ -183,6 +183,8 @@
 extern int okd_mgr_socket_mode;                // chown sock to this mode
 extern u_int okd_accept_delay;                 // delay before enabling accept
 extern bool okd_tcp_nodelay;                   // whether okd disables Nagle
+extern const char *ok_coredump_user;           // whom to chown coredumps to...
+extern const char *ok_coredump_group;          // whom to chgrp coredumps to...
 
 //
 // okld constants
Index: okd/okd.T
===================================================================
--- okd/okd.T	(revision 4534)
+++ okd/okd.T	(working copy)
@@ -358,6 +358,8 @@
     .ignore ("LogTick")
     .ignore ("LogPeriod")
     .ignore ("CoreDumpDir")
+    .ignore ("CoreDumpUser")
+    .ignore ("CoreDumpGroup")
     .ignore ("SocketDir")
     .ignore ("ServiceBin")
 
Index: okd/okld.h
===================================================================
--- okd/okld.h	(revision 4534)
+++ okd/okld.h	(working copy)
@@ -394,7 +394,9 @@
       _okd_mgr_socket (okd_mgr_socket),
       _pub_v2_error (false),
       _opt_daemon (false),
-      _lazy_startup (false) {}
+      _lazy_startup (false),
+      _coredump_usr (ok_coredump_user),
+      _coredump_grp (ok_coredump_group) {}
 
   ~okld_t () { if (logexc) delete logexc; }
 
@@ -448,6 +450,8 @@
 
   okld_helper_t &okd () { return _okd; }
   const okld_helper_t &okd () const { return _okd; }
+  const ok_grp_t &coredump_grp () const { return _coredump_grp; }
+  const ok_usr_t &coredump_usr () const { return _coredump_usr; }
 
 protected:
   bool parse_file (const str &fn);
@@ -483,6 +487,7 @@
   bool fixup_ssl_ports ();
 
   bool fix_uids ();
+  bool fix_coredump_uids ();
   void add_svc (ptr<okld_ch_t> c);
   bool config_jaildir ();
   void init_clock_daemon ();
@@ -549,6 +554,8 @@
   bool _opt_daemon;
   bool _lazy_startup;
 
+  ok_usr_t _coredump_usr;
+  ok_grp_t _coredump_grp;
 };
 
 #endif /* _OKD_OKD_H */
Index: okd/okldch.T
===================================================================
--- okd/okldch.T	(revision 4534)
+++ okd/okldch.T	(working copy)
@@ -458,6 +458,7 @@
   }
 }
 
+//-----------------------------------------------------------------------
 
 void
 okld_ch_t::clean_dumps ()
@@ -482,10 +483,15 @@
       warn ("could not move file %s: %m\n", from.cstr ());
     else if (unlink (from.cstr ()) != 0)
       warn ("unlink failed for file %s: %m\n", from.cstr ());
-    if (::chown (to.cstr (), 0, 0) != 0)
+
+    if (::chown (to.cstr (), 
+		 okld->coredump_usr ().getid (), 
+		 okld->coredump_grp ().getid ()) != 0)
       warn ("chown failed for file %s: %m\n", to.cstr ());
+
     if (::chmod (to.cstr (), 0400) != 0)
       warn ("chmod failed for file %s: %m\n", to.cstr ());
+
   }
   if (closedir (dirp) != 0) {
     warn ("close directory failed for %s: %m\n", rundir.cstr ());
Index: okd/okld.T
===================================================================
--- okd/okld.T	(revision 4534)
+++ okd/okld.T	(working copy)
@@ -634,6 +634,7 @@
   str sys_sel_tmp;
   u_int UIZ = 0;
   str gzip_tmp;
+  str tmp_dump_user, tmp_dump_group;
 
   ct.add ("Service", wrap (this, &okld_t::got_service, false))
     .add ("Service2", wrap (this, &okld_t::got_service2))
@@ -653,6 +654,8 @@
     .add ("ServiceGroup", &_config_grp)
     .add ("OkdExecPath", wrap (this, &okld_t::got_okd_exec))
     .add ("CoreDumpDir", wrap (got_dir, &coredumpdir))
+    .add ("CoreDumpUser", &tmp_dump_user)
+    .add ("CoreDumpGroup", &tmp_dump_group)
     .add ("SocketDir", wrap (got_dir, &sockdir))
     .add ("BindAddr", wrap (static_cast<ok_base_t *> (this), 
 			    &ok_base_t::got_bindaddr))
@@ -786,6 +789,10 @@
   if (gzip_tmp) {
     ok_gzip_mode = ok_gzip_str_to_mode (gzip_tmp);
   }
+
+  if (tmp_dump_user) { _coredump_usr = ok_usr_t (tmp_dump_user); }
+  if (tmp_dump_group) { _coredump_grp = ok_grp_t (tmp_dump_group); }
+
   return ret;
 }
 
@@ -1092,9 +1099,38 @@
 	ret = false;
     }
   }
+
+  if (!fix_coredump_uids ()) {
+    ret = false;
+  }
   return ret;
 }
 
+//-----------------------------------------------------------------------
+
+bool
+okld_t::fix_coredump_uids ()
+{
+  bool ret = true;
+  if (will_jail ()) {
+
+    if (!_coredump_usr) {
+      str s = _coredump_usr.getname ();
+      warn << "Cannot find coredump user: " << s << "\n";
+      ret = false;
+    }
+
+    if (!_coredump_grp) {
+      str s = _coredump_grp.getname ();
+      warn << "Cannot find coredump group: " << s << "\n";
+      ret = false;
+    }
+  }
+  return ret;
+}
+
+//-----------------------------------------------------------------------
+
 void
 okld_t::caught_signal (int sig)
 {
@@ -1102,6 +1138,8 @@
   shutdown1 ();
 }
 
+//-----------------------------------------------------------------------
+
 void
 okld_t::caught_okd_eof ()
 {
