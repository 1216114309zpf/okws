
Commands
-----------
 - if .. else .. then HTML commands

JavaScript
----------

Structure
---------
 - output_t should be a polymorphic base class; subclasses should be defined
   for the different output modes.

Testing
-------
 - JS, WSS

Pub
---
 - has to take multiple files, and with recursion. that way, we can take
   advantage of the cache -- otherwise, we can write a cache out to
   memory or disk?

Embedded C++
------------
What about HTML at the end of input?  Between <%c > and <%m> ?
How to enforce correctness? See sample2.ec with newlines at the 
end for the bugs.


Style / Readability
--------------------
- Clean up pfile_ , p_ , and xpub_ prefix zoo.  We can fix this.
- Figure out what's a section, and what's an element.
- Maybe make a better break between objects, elements and sections in XDR.

Memory
------
- Garbage collection -- when to clean up files and PFIDs -- especially
  after a pushed update.
- Init on load, or on use?  We can spawn external app to do it...

HTTP Issues
-----------
 - Finish up pubb'ed error docs
 - either #define OK_SERVER_ID, or use okdname/version but not both,
   as we're doing now...
 - multiple instances of each process on a SMP.  we'll also need something
   along the lines of an client cache, that map each client to the same
   server across multiple connections -- can be done with SHA1 hash
   of client address and port number
 - whitespace stripping in embedded C++ is a bit off
 - maximum number of clients served by okc_t object
 - fix .EC stuff so that it's much easier to make a new EC file. 
   Mainly need to worry about includes, so perhaps we should have 
   a <%i %> tag for each include, and hence an autogenerated
   init_doclist function. also need to make a mechanism by which we can
   add methods to both parent classes.
 - LRU garbage collection on the proxy and the pub server
 - better autconf for mysqlclient and -lz.
 - test javascript stuff
 - notify parent of child failures in libamt -- but then what to do?
 - white space stripping in tag outputs
 - factor out TODO list
 - autoconf pth system-call-hard insert; why no compile without?
 - while ((myrow_t r = sth->fetchrow ())) {
      str s = (*r)[0];
      int i = (*r)[1];
   }
 - autoconf for mysql is broken; don't support prepared statements for
   earlier versions of mysql
 - ok children should request pub information -- maybe up rclient init?
 - test timeout functionality; maybe fine-tune parameters?
 - ct_include evaluation of variables is broken. also, jailed files
   aren't handled properly.
 - autoconf anonymous web user, and check for oku
 - more accurate access (X_OK) check on startup (seteuid if root...)
 - kill everything nicely if the logd dies.  if the pubd dies, just cannot
   update templates. make lots of noise
 - install scripts that set appropriate permissions on services 
   (mode=750, owner = (max|patrick..), group = okd).
 - check for permissions of jaildirectory, and do not allow startup
   unless they check out.
 - aclnt pooling class
 - picture uploads
 - strange service restart problems -- due to browser?
 - okd runs away during really heavy-duty tests; might be some sort of
   OS-issue that is only shown under strain;
 - profile and optimize 
 - standard setuid / chroot / setgid function across all processes; perhaps
   even set it up in helper_t. maybe standardize parameter passing and
   jailing functions, too.
 - okmgr restart has buggy error messages;
 - combine svq and holdtab in an awesome way
 - better error messages / more robust okmgr repub stuff
 - Autoconf for zstr stuff
 - Document (1) debugging (2) library stuff
 - earlier duplicate okd check based on pid file.-- at least make sure
   pid file isn't hosed as a result
 - make a fast string class, that doesn't need to be parsed or put back
   together.  this will speed up pvar_t::output. 
 X parse HTTP header on 4XX errors, for logging purposes.
 X factor out parsing code from ok.C -- make it so that parsing can
   happen on the server side in the case of errors, so that way we 
   can log problems more effectively.
 - watch out for zombie processes
 X redirect

BUGS
----
 - timestamp in log /  timezone
 X panic in ahttpcon::sendv -- (1) what happend with HTTP_BAD_REQUEST
    and (2) why?  we should put in some debug messages.
 X -fhuge-objects required on gcc 2.95.4. actually, only due to 
   size of static cgi buffer in HTTP parsing class.
 X can't find mysql with default binary install.  need better autoconf
   made this a litter better.  also tried to work around some of the
   pth SOFT syscall problems.  these are doing all sorts of whacked
   substitutions throughout the codebase.  really only works with 
   hard syscall substitutions.
 - fine tune the amount of memory allocation given to CGI parsing;
   it should be within a small buffer for average case, and perhaps
   in bad case, it can grow to a dynamically allocated region, that
   is eventually put back on a free list. of course, we need to watch
   out for DOS possibilities here.
 - template iterators....
 X make sure the mysql and libpth are being linked in the correct
   order; don't want mysql sleeping.  we can figure that out with
   printfs, i guess.
 - if the pubd is still churning when a request comes in, i don't
   think that request is ever serviced (on startup).

FreeBsd 4.8 Bugs
----------------
 X weird behavior if cannot find jail directory; should quit the
   program right away; instead, it loops and tries to reboot.
 X strange parsing issues. perhaps lex is broken on this machine.

TODO
----
 - mybind_res for rpc_bytes<T> * values.
 - fix bug in nested include statements in config files.
 X zbuf's in aarr_t and concatenatable.
 X rename repository to okws1
 - deal with permissions using setuid stuff
 - implement authorization codes for the RPC-db protocol.
 X multiple okd's running on the same machine -- need to be able
   to specify the various ports
 X get CVS ignore right when doing the boilerplate stuff
 - services should fail if their templates are not available.
 - mem leak in pt1 -- still; weird.
 - test with more than 1024 FDs.
 - better zbuf caching scheme; have .g files compile into

	out.cache (0x1294819ff1212398592, 
	 	   "blah blah blah here is my string blah blah blah "
		   "and so on blah blah blah blah blah ")
	   .cache (0x9182938571038491034,
		   "more shit and more shit and more and more shit");

   and then don't cache anything else!

 X crash under heavy load when a connection aborts
 - OKD still runs away in some tests. 
 - for linux, might make sense to change FD-descriptor passing scheme;
   different ordering guarantees.  perhaps it's easier just to call
   getpeername on the other end, although it is an extra syscall
