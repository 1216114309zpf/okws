// -*- mode:c++ -*-
#pragma once

#include "pub3expr.h"
#include "abson.h"
#include "tame_io.h" // tame::wait{read, write}
#include "async.h" // tcpconnect
#include "tame_lock.h"
#include "mongo.h"
// okmongo::ResponseReader

// To avoid multiple inheritance nightmares we use a different set of names for
// those functions...
class AbstractValueReader {
public:
    virtual void AVRReportError(str) = 0;
    virtual bool AVRIsDone() const = 0;
    virtual int32_t AVRConsume(const char *, int) = 0;
};

template <typename Parent>
class AVRAdapter : public Parent, public AbstractValueReader {
public:
    using Parent::Parent;

    void AVRReportError(str s) final {
        Parent::Error(s.cstr());
    }

    bool AVRIsDone() const final { return Parent::Done(); }

    int32_t AVRConsume(const char *s, int len) final {
        return Parent::Consume(s, len);
    }
};

struct mongo_host_t {
    str hostname;
    uint16_t port;
    explicit mongo_host_t(str h, uint16_t p = 27017): hostname(h), port(p) {}
};

struct mongo_connection_fields_base_t {
    vec<mongo_host_t> hosts_;
    str db_;
    int socket_;
    int32_t requestid_;
    tame::lock_t lock_;
    int timeout_ = 2000; // in ms
    int connect_timeout_ = 100;
};

struct mongo_connection_base_t : public mongo_connection_fields_base_t {
    static constexpr int kScratchLen =
        4096 - sizeof(mongo_connection_fields_base_t);
    char scratch_[kScratchLen];

    void run_cmd(ref<const okmongo::BsonWriter> w, evb_t ev, CLOSURE);
    void run_cmd(const okmongo::BsonWriter &w, evb_t ev, CLOSURE);

    void run(const okmongo::BsonWriter &qry, AbstractValueReader *r, evv_t,
             CLOSURE);

    void abort();
    void close();
};

struct mongo_result_t {
    str error;
    int cnt;
};

typedef event<mongo_result_t>::ref amongo_res_ev_t ;

class mongo_connection_t : protected mongo_connection_base_t {
    // TODO: error reporting.
public:
    int32_t get_requestid() { return requestid_++; }
    str get_db() const { return db_; }

    using mongo_connection_base_t::run_cmd;

    mongo_connection_t(str hostname, str db, uint16_t port = 27017);

    mongo_connection_t(const vec<mongo_host_t>& hosts, str db);


    //--------------------------------------------------------------------------
    // Pub functions
    //--------------------------------------------------------------------------

    // Specialized for pub..
    void query(str collection, const ptr<pub3::expr_dict_t> qry,
               pub3::xlev_t ev, CLOSURE);

    template <typename Res, typename Qry>
    void query(str collection, const Qry &qry, Res *out, amongo_res_ev_t ev);

    template <typename Res, typename Qry, typename Sel>
    void query(str collection, const Qry &qry, Res *out, amongo_res_ev_t ev,
               const Sel &sel);

    template <typename T>
    void remove(str collection, const T &qry, evb_t ev);

    template <typename T>
    void insert(str collection, const T &val, evb_t ev);

    template <typename T>
    void insert(str collection, const vec<T> &vals, evb_t ev);

    void close();
};

//------------------------------------------------------------------------------
// implementation
//------------------------------------------------------------------------------

namespace okmongo {

template <>
void BsonWriteFields<ptr<pub3::expr_dict_t>>(
        BsonWriter *w, ptr<pub3::expr_dict_t> const &dict);

template <typename T>
void BsonWriteFields(BsonWriter *w, const T &t) {
    rpc_bson_writer bw(w);
    rpc_traverse(bw, const_cast<T &>(t));
}

}  // namespace okmongo

template <typename T>
class amongo_rpc_bson_reader
        : public AVRAdapter<
                  okmongo::BsonValueResponseReader<amongo_rpc_bson_reader<T>>> {
    str error_;
    T *out_;
    int cnt_ = 0;
public:
    static const bool multi = false;

    void ResetParsing() { this->Reset(); }

    amongo_rpc_bson_reader(T *out) : out_(out){}

    void EmitError(str msg) {
        if (!error_) {
            error_ = msg;
            out_ = nullptr;
            cnt_ = -1;
        }
    }

    void EmitBsonValue(const okmongo::BsonValue &bv) {
        if (error_) {
            return;
        }
        if (cnt_ == 1) {
            this->Error("Got more than one value");
        }
        rpc_bson_reader rdr(bv);
        bool ok = rpc_traverse(rdr, *out_);
        if (ok) {
            cnt_++;
        } else {
            str error = rdr.get_error();
            if (error) {
                strbuf ebuff("Parse error: ");
                ebuff << error;
                this->Error(str(ebuff));
            } else {
                this->Error("Failed to parse value");
            }
        }
    }

    bool ok() const {
        return !error_;
    }

    mongo_result_t get_res() {
        if (!this->Done()) {
            this->Error("Partial read!");
        }
        if (error_) {
            return {error_, -1};
        }
        return {nullptr, cnt_};
    }
};

template <typename T>
class amongo_rpc_bson_reader<vec<T>>
        : public AVRAdapter<okmongo::BsonValueResponseReader<
                  amongo_rpc_bson_reader<vec<T>>>> {
    str error_;
    vec<T> *out_;
    int cnt_ = 0;
public:
    void ResetParsing() { this->Reset(); }

    static const bool multi = true;

    amongo_rpc_bson_reader(vec<T> *out) : out_(out){}

    void EmitError(str msg) {
        if (!error_) {
            error_ = msg;
            out_ = nullptr;
        }
    }

    void EmitBsonValue(const okmongo::BsonValue &bv) {
        if (error_) {
            return;
        }
        rpc_bson_reader rdr(bv);
        T& val = out_->push_back();
        bool ok = rpc_traverse(rdr, val);
        if (ok) {
            cnt_++;
        } else {
            str error = rdr.get_error();
            strbuf errbuf("Failed to parse value from BsonValue: ");
            if (!error) {
                errbuf << "Unkown parse error";
            } else {
                errbuf << error;
            }
            this->Error(str(errbuf));
        }
    }

    bool ok() const {
        return !error_;
    }

    mongo_result_t get_res() {
        if (!this->Done()) {
            this->Error("Partial read");
        }
        if (error_) {
            return {error_, -1};
        }
        return {nullptr, cnt_};
    }
};

template <typename T>
struct amongo_insert_op_t {
    static void run(mongo_connection_base_t *, str, const vec<T> &, evb_t,
                    CLOSURE);
};

template <typename Res>
struct amongo_query_runner_t {
    okmongo::BsonWriter out;
    amongo_rpc_bson_reader<Res> reader;

    amongo_query_runner_t(Res *tgt) : reader(tgt) {};

    void run(mongo_connection_base_t *, str, evv_t, CLOSURE);
};

template <typename Res, typename T>
struct amongo_query_op_t {
    static void run(mongo_connection_base_t *, str, const T &, Res *,
                    amongo_res_ev_t, CLOSURE);
};

template <typename Res, typename T, typename Sel>
struct amongo_query2_op_t {
    static void run(mongo_connection_base_t *, str, const T &,
                    const Sel &,  Res *, amongo_res_ev_t, CLOSURE);
};

tamed template <typename T>
static void amongo_insert_op_t<T>::run(mongo_connection_base_t *conn,
                                       str collection, const vec<T> &vals,
                                       evb_t ev) {
    tvars {
        bool ok(true);
        okmongo::BsonWriter cmd;
        decltype(std::declval<const vec<T>>().begin()) curs (vals.begin());
    }
    while (ok && curs != vals.end()) {
        cmd.Clear();
        curs = okmongo::FillInsertRangeOp(&cmd, ++conn->requestid_,
                                          conn->db_.cstr(), collection.cstr(),
                                          curs, vals.end());
        twait {
            conn->run_cmd(cmd, mkevent(ok));
        }
    }
    ev->trigger(ok);
}

tamed template <typename Res>
void amongo_query_runner_t<Res>::run(mongo_connection_base_t *conn,
                                     str collection, evv_t ev) {
    tvars {
        bool ok;
    }
    twait {
        conn->run(out, &reader, mkevent());
    }

    while (conn->socket_ && reader.Header().cursor_id != 0) {
        // If we've gone this far then we've successfully parsed the header and
        // we might need to either close a cursor or parse more.
        out.Clear();
        if (!reader.ok()) {
            okmongo::FillKillCursorsOp(&out, ++conn->requestid_,
                                       reader.Header().cursor_id);
            twait {
                conn->run_cmd(out, mkevent(ok));
            }
            // We def don't want to leave a cursor hanging out here...
            if (!ok) {
                conn->abort();
            }
            break;
        } else {
            okmongo::FillGetMoreOp(&out, ++conn->requestid_, conn->db_.cstr(),
                                   collection.cstr(), reader.Header().cursor_id);
            reader.Clear();
            twait {
                conn->run(out, &reader, mkevent());
            }
        }
    }
    ev->trigger();
}

tamed template <typename Res, typename T>
static void amongo_query_op_t<Res, T>::run(mongo_connection_base_t *conn,
                                           str collection, const T &qry,
                                           Res *out, amongo_res_ev_t ev) {
    tvars {
        amongo_query_runner_t<Res> runner(out);
    }
    okmongo::FillQueryOp(&runner.out, ++conn->requestid_, conn->db_.cstr(),
                         collection.cstr(), qry, runner.reader.multi ? 0 : 1);

    twait {
        runner.run(conn, collection, mkevent());
    }
    ev->trigger(runner.reader.get_res());
}

tamed template <typename Res, typename T, typename Sel>
static void amongo_query2_op_t<Res, T, Sel>::run(mongo_connection_base_t *conn,
                                                 str collection, const T &qry,
                                                 const Sel &sel, Res *out,
                                                 amongo_res_ev_t ev) {
    tvars {
        amongo_query_runner_t<Res> runner(out);
    }
    okmongo::FillQueryOp(&runner.out, ++conn->requestid_, conn->db_.cstr(),
                         collection.cstr(), qry, sel,
                         runner.reader.multi ? 0 : 1);

    twait {
        runner.run(conn, collection, mkevent());
    }
    ev->trigger(runner.reader.get_res());
}

//------------------------------------------------------------------------------

template <typename T>
void mongo_connection_t::insert(str collection, const T &val, evb_t ev) {
    ref<okmongo::BsonWriter> cmd(New refcounted<okmongo::BsonWriter>);
    okmongo::FillInsertOp(cmd, ++requestid_, db_.cstr(), collection.cstr(),
                          val);
    run_cmd(cmd, ev);
}

template <typename T>
void mongo_connection_t::insert(str collection, const vec<T> &vals, evb_t ev) {
    amongo_insert_op_t<T>::run(this, collection, vals, ev);
}

template <typename T>
void mongo_connection_t::remove(str collection, const T &val, evb_t ev) {
    ref<okmongo::BsonWriter> cmd(New refcounted<okmongo::BsonWriter>);
    okmongo::FillDeleteOp(cmd, ++requestid_, db_.cstr(), collection.cstr(),
                          val);
    run_cmd(cmd, ev);
}

template <typename Res, typename Qry>
void mongo_connection_t::query(str collection, const Qry &qry, Res *out,
                               amongo_res_ev_t ev) {
    amongo_query_op_t<Res, Qry>::run(this, collection, qry, out, ev);
}

template <typename Res, typename Qry, typename Sel>
void mongo_connection_t::query(str collection, const Qry &qry, Res *out,
                               amongo_res_ev_t ev, const Sel &sel) {
    amongo_query2_op_t<Res, Qry, Sel>::run(this, collection, qry, sel, out, ev);
}
