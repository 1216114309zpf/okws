{%
    locals { rfn3_lib_doc : {} }

    rfn3_lib_doc = {
	
	rand : {
	    input : [ { a1 : "i" }, { a2 : "i", opt : true } ],
	    output : "i",
	    desc : "Given one argument (//a1//), outputs an integer randomly
between 0 and //a1//.  Given two (a1 and a1), outputs an integer randomly
between //a1// and //a2//"
	},
	
	len : {
	    input : [ { o : "O" } ],
	    output : "u",
	    desc : "Given an input object //o//, returns its length.  
If //o// is a string, return the length of //s//.  If it is a list,
return the number of elements in the list.  If it is a dictionary,
return the number of bound pairs in the dictionary."
	},

	range : { 
	    input : [ { a1 : "i" }, { a2 : "i", opt : true }, { a3 : "i" } ],
	    output : "l",
	    desc : "If called with one argument (//a1//), output a integers
in [0,//a1//). If called with two arguments (//a1// and //a2//), output 
a list of integers in [//a1//, //a2//). If called with three arguments, 
//a3// is the step between elements."
	},

	isnull : {
	    input : [ { o : "O" } ],
	    output : "b",
	    desc : "Output //True// if //o// is //null// and false otherwise."
	},

	join : {
	    input : [ { delim : "s", l : "l" }],
	    output : "s",
	    desc : "Take the list of strings //l// and join them together
with the delimiter //delim//.  Output a string."
	},

	strip : {
	    input : [ { s : "s" } ],
	    output : "s",
	    desc : "Strips leading, trailing spaces and reduce in-between 
spaces to just one space"
	},
	
	substr : {
	    input : [ { s : "s"}, {start : "i"}, {len : "i" } ],
	    output : "s",
	    desc : "Output a substring of //s//, starting at 
character //start// and //len// bytes long."
	},
	    
	split : { 
	    input: [ { r : "r"} , { s : "s"} ],
	    output : "l",
	    desc : "Given a regex //r// and a string //s//, split //s// into
a list of strings, akin to the Python function 'split'.  Return a list
of strings."
	},
	
	match : {
	    input : [ { r : "r" }, {s : "s" } ],
	    output : "b",
	    desc : "Given a regex //r// and a string //s//, return //true//
if //r// matches the **whole** string //s// and //false// otherwise."
	},

	search : {
	    input : [ { r : "r"}, { s : "s"} ],
	    output : "b",
	    desc : "Given a regex //r// and a string //s//, return //true//
if //r// is found in //s// and //false// otherwise."
	},

	tolower : {
	    input : [ { s : "s" } ],
	    output : "s",
	    desc : "Convert all alpha characters in //s// to lowercase"
	},
	
	toupper : {
	    input : [ { s : "s" } ],
	    output : "s",
	    desc : "Convert all alpha characters in //s// to uppercase"
	},

	html_escape : {
	    input : [ { s : "s"} ],
	    output : "s",
	    desc : "Take the input //s// and escape it so that it's
safe to output in HTML without it being interpreted as markup. For 
instance, when outputting forum posts or personal essays. Mainly, 
escape '<', '>' and '&' tags. Output the escaped string."
	},

	json_escape : {
	    input : [ { s : "s"} ],
	    output : "s",
	    desc : "Take the input text s and escape all double-quotes, 
backslashes, newlines and tabs. Output the escaped string."
	},

	"default" : {
	    input : [ { in : "O" }, { val : "O", opt : true } ],
	    output : "O",
	    desc : "Given the input value //in//, check to see if it's 
//null.//  If //null//, then output //val//, outherwise, output //in//.
If //val// wasn't specified and //in// is null, then output the empty
string ''"
	},

	append : {
	    input : [ { v : "l" }, { o : "O" } ],
	    output : "n",
	    desc : "Given the list //v//, append onto it the
object //o//.  There is no output; changes are made to //v// directly.",
	    example : '{% locals { d : { x : "hi" } } %}
\%{d.y|default("bye")} will output "bye"
\%{d.z|default} will output "" and will not produce any warnings.'
	},

	map : {

	    input : [ { d : "d" }, { o : "O" }],
	    output : "O",
	    desc : "Map every element in //o// to the value in the
dictionary //d//, more or less. If //o// is a list, then map each
element of the list via //d//.  If //o// is a dictionary, map the 
values of //o// through //d//.",
	    example : '{% locals { x : { "a" : "A", "b" : "B" }, v : [ "a", "b", "c" ], d : { "xx" : "a" } } %}
\%{map(x,v)} will output ["A", "B", null]
\%{map(x,d)} will output { "xx" : "A" }'
	},

	tag_escape : {
	    
	    input : [ { s : "s" } ],
	    output : "s",
	    desc : "Escape all tags except for <b>, <i>, <br> and <p>."
	}
    };

    docs.rfn3 = rfn3_lib_doc;
%}
